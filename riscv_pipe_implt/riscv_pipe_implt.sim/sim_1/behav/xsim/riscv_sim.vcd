$date
   Tue Aug 12 10:57:51 2025
$end

$version
  2023.2
  $dumpfile ("riscv_sim.vcd") 
$end

$timescale
  1ps
$end

$scope module riscv_pip_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 32 # PCF [31:0] $end
$var reg 32 $ InstrF [31:0] $end
$var reg 1 % MemWriteM $end
$var reg 32 & DataAdrM [31:0] $end
$var reg 32 ' WriteDataM [31:0] $end
$var reg 32 ( ReadDataM [31:0] $end
$var reg 32 ) expected_writes $end
$var reg 32 * cycle_count [31:0] $end
$var reg 32 + error_count [31:0] $end
$var reg 32 , last_pc [31:0] $end
$var reg 32 - same_pc_count [31:0] $end
$var reg 1 . test_complete $end
$scope module DUT $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 32 1 instrf [31:0] $end
$var wire 32 2 pcf [31:0] $end
$var wire 32 3 readdatam [31:0] $end
$var wire 32 4 writedatam [31:0] $end
$var wire 32 5 dataadrm [31:0] $end
$var wire 1 6 memwritem $end
$var wire 32 7 readdatam_w [31:0] $end
$scope module rv $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 32 2 pcf [31:0] $end
$var wire 32 1 instrf [31:0] $end
$var wire 1 6 memwritem $end
$var wire 32 5 aluresultm [31:0] $end
$var wire 32 4 writedatam [31:0] $end
$var wire 32 7 readdatam [31:0] $end
$var wire 1 8 alusrcae $end
$var wire 1 9 regwritem $end
$var wire 1 : regwritew $end
$var wire 1 ; zeroe $end
$var wire 1 < signe $end
$var wire 1 = pcjalsrce $end
$var wire 1 > pcsrce $end
$var wire 2 ? alusrcbe [1:0] $end
$var wire 1 @ stalld $end
$var wire 1 A stallf $end
$var wire 1 B flushd $end
$var wire 1 C flushe $end
$var wire 1 D resultsrce0 $end
$var wire 2 E resultsrcw [1:0] $end
$var wire 3 F immsrcd [2:0] $end
$var wire 4 G alucontrole [3:0] $end
$var wire 32 H instrd [31:0] $end
$var wire 5 I rs1d [4:0] $end
$var wire 5 J rs2d [4:0] $end
$var wire 5 K rs1e [4:0] $end
$var wire 5 L rs2e [4:0] $end
$var wire 5 M rde [4:0] $end
$var wire 5 N rdm [4:0] $end
$var wire 5 O rdw [4:0] $end
$var wire 2 P forwardae [1:0] $end
$var wire 2 Q forwardbe [1:0] $end
$scope module controller_01 $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 7 R op [6:0] $end
$var wire 3 S funct3d [2:0] $end
$var wire 1 T funct7b5 $end
$var wire 1 ; zeroe $end
$var wire 1 < signe $end
$var wire 1 C flushe $end
$var wire 1 D resultsrce0 $end
$var wire 2 E resultsrcw [1:0] $end
$var wire 1 6 memwritem $end
$var wire 1 = pcjalsrce $end
$var wire 1 > pcsrce $end
$var wire 1 8 alusrcae $end
$var wire 2 ? alusrcbe [1:0] $end
$var wire 1 9 regwritem $end
$var wire 1 : regwritew $end
$var wire 3 F immsrcd [2:0] $end
$var wire 4 G alucontrole [3:0] $end
$var wire 2 U aluopd [1:0] $end
$var wire 2 V resultsrcd [1:0] $end
$var wire 2 W resultsrce [1:0] $end
$var wire 2 X resultsrcm [1:0] $end
$var wire 4 Y alucontrold [3:0] $end
$var wire 1 Z branchd $end
$var wire 1 [ branche $end
$var wire 1 \ memwrited $end
$var wire 1 ] memwritee $end
$var wire 1 ^ jumpd $end
$var wire 1 _ jumpe $end
$var wire 1 ` alusrcad $end
$var wire 1 a regwrited $end
$var wire 1 b regwritee $end
$var wire 2 c alusrcbd [1:0] $end
$var wire 1 d zeroop $end
$var wire 1 e signop $end
$var wire 1 f branchop $end
$var wire 3 g funct3e [2:0] $end
$scope module md $end
$var wire 7 R op [6:0] $end
$var wire 1 a regwrite $end
$var wire 2 V resultsrc [1:0] $end
$var wire 1 \ memwrite $end
$var wire 1 Z branch $end
$var wire 1 ` alusrca $end
$var wire 2 c alusrcb [1:0] $end
$var wire 1 ^ jump $end
$var wire 3 F immsrc [2:0] $end
$var wire 2 U aluop [1:0] $end
$var reg 14 h controls [13:0] $end
$upscope $end
$scope module ad $end
$var wire 1 T opb5 [0:0] $end
$var wire 3 S funct3 [2:0] $end
$var wire 1 T funct7b5 [0:0] $end
$var wire 2 U aluop [1:0] $end
$var wire 4 Y alucontrol [3:0] $end
$var wire 1 i rtypesub $end
$var reg 4 j alucontrol_reg [3:0] $end
$upscope $end
$scope module pipreg_d_to_e $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 1 C clear $end
$var wire 1 a regwrited $end
$var wire 1 \ memwrited $end
$var wire 1 ^ jumpd $end
$var wire 1 Z branchd $end
$var wire 1 ` alusrcad $end
$var wire 2 c alusrcbd [1:0] $end
$var wire 2 V resultsrcd [1:0] $end
$var wire 4 Y alucontrold [3:0] $end
$var wire 3 S funct3d [2:0] $end
$var reg 1 k regwritee $end
$var reg 1 l memwritee $end
$var reg 1 m jumpe $end
$var reg 1 n branche $end
$var reg 1 o alusrcae $end
$var reg 2 p alusrcbe [1:0] $end
$var reg 2 q resultsrce [1:0] $end
$var reg 4 r alucontrole [3:0] $end
$var reg 3 s funct3e [2:0] $end
$upscope $end
$scope module pipreg_e_to_m $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 1 b regwritee $end
$var wire 1 ] memwritee $end
$var wire 2 W resultsrce [1:0] $end
$var reg 1 t regwritem $end
$var reg 1 u memwritem $end
$var reg 2 v resultsrcm [1:0] $end
$upscope $end
$scope module pipreg_m_to_w $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 1 9 regwritem $end
$var wire 2 X resultsrcm [1:0] $end
$var reg 1 w regwritew $end
$var reg 2 x resultsrcw [1:0] $end
$upscope $end
$upscope $end
$scope module hazardunit_01 $end
$var wire 5 I rs1d [4:0] $end
$var wire 5 J rs2d [4:0] $end
$var wire 5 K rs1e [4:0] $end
$var wire 5 L rs2e [4:0] $end
$var wire 5 M rde [4:0] $end
$var wire 5 N rdm [4:0] $end
$var wire 5 O rdw [4:0] $end
$var wire 1 9 regwritem $end
$var wire 1 : regwritew $end
$var wire 1 D resultsrce0 $end
$var wire 1 > pcsrce $end
$var reg 2 y forwardae [1:0] $end
$var reg 2 z forwardbe [1:0] $end
$var wire 1 @ stalld $end
$var wire 1 A stallf $end
$var wire 1 B flushd $end
$var wire 1 C flushe $end
$var wire 1 { lwstall $end
$upscope $end
$scope module datapath_01 $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 2 E resultsrcw [1:0] $end
$var wire 1 = pcjalsrce $end
$var wire 1 > pcsrce $end
$var wire 1 8 alusrcae $end
$var wire 2 ? alusrcbe [1:0] $end
$var wire 1 : regwritew $end
$var wire 3 F immsrcd [2:0] $end
$var wire 4 G alucontrole [3:0] $end
$var wire 1 ; zeroe $end
$var wire 1 < signe $end
$var wire 32 2 pcf [31:0] $end
$var wire 32 1 instrf [31:0] $end
$var wire 32 H instrd [31:0] $end
$var wire 32 5 aluresultm [31:0] $end
$var wire 32 4 writedatam [31:0] $end
$var wire 32 7 readdatam [31:0] $end
$var wire 2 P forwardae [1:0] $end
$var wire 2 Q forwardbe [1:0] $end
$var wire 5 I rs1d [4:0] $end
$var wire 5 J rs2d [4:0] $end
$var wire 5 K rs1e [4:0] $end
$var wire 5 L rs2e [4:0] $end
$var wire 5 M rde [4:0] $end
$var wire 5 N rdm [4:0] $end
$var wire 5 O rdw [4:0] $end
$var wire 1 @ stalld $end
$var wire 1 A stallf $end
$var wire 1 B flushd $end
$var wire 1 C flushe $end
$var wire 32 | pcd [31:0] $end
$var wire 32 } pce [31:0] $end
$var wire 32 ~ aluresulte [31:0] $end
$var wire 32 !! aluresultw [31:0] $end
$var wire 32 "! readdataw [31:0] $end
$var wire 32 #! pcnextf [31:0] $end
$var wire 32 $! pcplus4f [31:0] $end
$var wire 32 %! pcplus4d [31:0] $end
$var wire 32 &! pcplus4e [31:0] $end
$var wire 32 '! pcplus4m [31:0] $end
$var wire 32 (! pcplus4w [31:0] $end
$var wire 32 )! pctargete [31:0] $end
$var wire 32 *! branjumptargete [31:0] $end
$var wire 1 +! pcjalsrcm $end
$var wire 32 ,! writedatae [31:0] $end
$var wire 32 -! immextd [31:0] $end
$var wire 32 .! immexte [31:0] $end
$var wire 32 /! srcaefor [31:0] $end
$var wire 32 0! srcae [31:0] $end
$var wire 32 1! srcbe [31:0] $end
$var wire 32 2! rd1d [31:0] $end
$var wire 32 3! rd2d [31:0] $end
$var wire 32 4! rd1e [31:0] $end
$var wire 32 5! rd2e [31:0] $end
$var wire 32 6! resultw [31:0] $end
$var wire 5 7! rdd [4:0] $end
$scope module u_jal_r $end
$var wire 32 )! d0 [31:0] $end
$var wire 32 ~ d1 [31:0] $end
$var wire 1 +! s $end
$var wire 32 *! y [31:0] $end
$upscope $end
$scope module u_pcmux $end
$var wire 32 $! d0 [31:0] $end
$var wire 32 *! d1 [31:0] $end
$var wire 1 > s $end
$var wire 32 #! y [31:0] $end
$upscope $end
$scope module u_if $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 1 8! en $end
$var wire 32 #! d [31:0] $end
$var reg 32 9! q [31:0] $end
$upscope $end
$scope module u_pcadd4 $end
$var wire 32 2 a [31:0] $end
$var wire 32 :! b [31:0] $end
$var wire 32 $! y [31:0] $end
$upscope $end
$scope module u_if_id $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 1 B clear $end
$var wire 1 ;! enable $end
$var wire 32 1 instrf [31:0] $end
$var wire 32 2 pcf [31:0] $end
$var wire 32 $! pcplus4f [31:0] $end
$var reg 32 <! instrd [31:0] $end
$var reg 32 =! pcd [31:0] $end
$var reg 32 >! pcplus4d [31:0] $end
$upscope $end
$scope module u_rf $end
$var wire 1 / clk $end
$var wire 1 : we3 $end
$var wire 5 I a1 [4:0] $end
$var wire 5 J a2 [4:0] $end
$var wire 5 O a3 [4:0] $end
$var wire 32 6! wd3 [31:0] $end
$var wire 32 2! rd1 [31:0] $end
$var wire 32 3! rd2 [31:0] $end
$upscope $end
$scope module u_ext $end
$var wire 32 ?! instr [31:0] $end
$var wire 3 F immsrc [2:0] $end
$var reg 32 @! immext [31:0] $end
$upscope $end
$scope module u_id_iex $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 1 C clear $end
$var wire 32 2! rd1d [31:0] $end
$var wire 32 3! rd2d [31:0] $end
$var wire 32 | pcd [31:0] $end
$var wire 5 I rs1d [4:0] $end
$var wire 5 J rs2d [4:0] $end
$var wire 5 7! rdd [4:0] $end
$var wire 32 -! immextd [31:0] $end
$var wire 32 %! pcplus4d [31:0] $end
$var reg 32 A! rd1e [31:0] $end
$var reg 32 B! rd2e [31:0] $end
$var reg 32 C! pce [31:0] $end
$var reg 5 D! rs1e [4:0] $end
$var reg 5 E! rs2e [4:0] $end
$var reg 5 F! rde [4:0] $end
$var reg 32 G! immexte [31:0] $end
$var reg 32 H! pcplus4e [31:0] $end
$upscope $end
$scope module u_forwardae $end
$var wire 32 4! d0 [31:0] $end
$var wire 32 6! d1 [31:0] $end
$var wire 32 5 d2 [31:0] $end
$var wire 2 P s [1:0] $end
$var wire 32 /! y [31:0] $end
$upscope $end
$scope module u_srcamux $end
$var wire 32 /! d0 [31:0] $end
$var wire 32 I! d1 [31:0] $end
$var wire 1 8 s $end
$var wire 32 0! y [31:0] $end
$upscope $end
$scope module u_forwardbe $end
$var wire 32 5! d0 [31:0] $end
$var wire 32 6! d1 [31:0] $end
$var wire 32 5 d2 [31:0] $end
$var wire 2 Q s [1:0] $end
$var wire 32 ,! y [31:0] $end
$upscope $end
$scope module u_srcbmux $end
$var wire 32 ,! d0 [31:0] $end
$var wire 32 .! d1 [31:0] $end
$var wire 32 )! d2 [31:0] $end
$var wire 2 ? s [1:0] $end
$var wire 32 1! y [31:0] $end
$upscope $end
$scope module u_pcaddbranch $end
$var wire 32 } a [31:0] $end
$var wire 32 .! b [31:0] $end
$var wire 32 )! y [31:0] $end
$upscope $end
$scope module u_alu $end
$var wire 32 0! srca [31:0] $end
$var wire 32 1! srcb [31:0] $end
$var wire 4 G alucontrol [3:0] $end
$var reg 32 J! aluresult [31:0] $end
$var wire 1 ; zero $end
$var wire 1 < sign $end
$var wire 32 K! sum [31:0] $end
$var wire 1 L! overflow $end
$upscope $end
$scope module u_iex_imem $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 1 = pcjalsrce $end
$var wire 32 ~ aluresulte [31:0] $end
$var wire 32 ,! writedatae [31:0] $end
$var wire 5 M rde [4:0] $end
$var wire 32 &! pcplus4e [31:0] $end
$var reg 32 M! aluresulm [31:0] $end
$var reg 32 N! writedatm [31:0] $end
$var reg 5 O! rdm [4:0] $end
$var reg 32 P! pcplus4m [31:0] $end
$var reg 1 Q! pcjalsrcm $end
$upscope $end
$scope module u_imem_iw $end
$var wire 1 / clk $end
$var wire 1 0 reset $end
$var wire 32 5 aluresultm [31:0] $end
$var wire 32 7 readdatam [31:0] $end
$var wire 5 N rdm [4:0] $end
$var wire 32 '! pcplus4m [31:0] $end
$var reg 32 R! aluresultw [31:0] $end
$var reg 32 S! readdataw [31:0] $end
$var reg 5 T! rdw [4:0] $end
$var reg 32 U! pcplus4w [31:0] $end
$upscope $end
$scope module u_resultmux $end
$var wire 32 !! d0 [31:0] $end
$var wire 32 "! d1 [31:0] $end
$var wire 32 (! d2 [31:0] $end
$var wire 2 E s [1:0] $end
$var wire 32 6! y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module dmem_inst $end
$var wire 1 / clk $end
$var wire 1 6 we $end
$var wire 32 5 a [31:0] $end
$var wire 32 4 wd [31:0] $end
$var wire 32 7 rd [31:0] $end
$upscope $end
$upscope $end
$scope begin Block121_17 $end
$var reg 32 V! found [31:0] $end
$scope begin Block123_18 $end
$var reg 32 W! i [31:0] $end
$upscope $end
$upscope $end
$scope begin Block155_19 $end
$var reg 32 X! i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
b0 !!
1"
b0 "!
b0 #
b100 #!
b10011 $
b100 $!
0%
b0 %!
b0 &
b0 &!
b0 '
b0 '!
bx (
b0 (!
b10100011100000010zzz0zzz00z11zz0 )
b0 )!
b0 *
b0 *!
b0 +
0+!
b0 ,
b0 ,!
b0 -
bz00000 -!
0.
b0 .!
0/
b0 /!
10
b0 0!
b10011 1
b0 1!
b0 2
b0 2!
bx 3
b0 3!
b0 4
b0 4!
b0 5
b0 5!
06
b0 6!
bx 7
b0 7!
08
18!
09
b0 9!
0:
b100 :!
1;
1;!
0<
b0 <!
0=
b0 =!
0>
b0 >!
b0 ?
bz0000000000000000000000000 ?!
0@
bz00000 @!
0A
b0 A!
0B
b0 B!
0C
b0 C!
0D
b0 D!
b0 E
b0 E!
b0 F
b0 F!
b0 G
b0 G!
b0 H
b0 H!
b0 I
b0 I!
b0 J
b0 J!
b0 K
b0 K!
b0 L
0L!
b0 M
b0 M!
b0 N
b0 N!
b0 O
b0 O!
b0 P
b0 P!
b0 Q
0Q!
b0 R
b0 R!
b0 S
b0 S!
0T
b0 T!
b0 U
b0 U!
b0 V
b0 V!
b0 W
b0 W!
b0 X
b0 X!
b0 Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
b0 c
1d
0e
1f
b0 g
b0 h
0i
b0 j
0k
0l
0m
0n
0o
b0 p
b0 q
b0 r
b0 s
0t
0u
b0 v
0w
b0 x
b0 y
b0 z
0{
b0 |
b0 }
b0 ~
$end

#5000
1!
1/

#10000
0!
0/

#15000
1!
1/

#20000
0!
0"
b111100000000000010010011 $
0/
00
b111100000000000010010011 1

#25000
1!
bx "!
b100 #
b1000 #!
b1011000000000000100010011 $
b1000 $!
b100 %!
bx )!
b1 *
bx *!
b1 -
bz00000 .!
1/
b1011000000000000100010011 1
b100 2
bx 3!
b1 7!
b100 9!
b111100000000000010010011 <!
b100 >!
bz0000000011110000000000001 ?!
bz00000 G!
b111100000000000010010011 H
b1111 J
b10011 R
b11 S
bx S!
1T
b10 U
1a
b1 c
b10000010000100 h

#30000
0!
0/

#35000
1!
b1000 #
b1100 #!
b1000001000000110110011 $
b1100 $!
b1000 %!
b100 &!
b10 *
b100 ,
bx ,!
b0 -
1/
b1000001000000110110011 1
bz00000 1!
b1000 2
bx 5!
b10 7!
b1000 9!
x;
x<
b1011000000000000100010011 <!
b100 =!
b1000 >!
b1 ?
bz0000000101100000000000010 ?!
bx B!
b1111 E!
b1 F!
b1011000000000000100010011 H
b100 H!
b10110 J
bx J!
bx K!
b1111 L
xL!
b1 M
b10011 R
b11 S
1T
1b
xd
xe
xf
1k
b1 p
b100 |
bx ~

#40000
0!
0/

#45000
1!
b1100 #
b10000 #!
b1000011110001000110011 $
b10000 $!
b1100 %!
bx &
b1000 &!
bx '
b100 '!
b11 *
b1000 ,
bx -!
1/
b1000011110001000110011 1
b1100 2
bx 2!
bx 4
bx 5
b11 7!
19
b1100 9!
b1000001000000110110011 <!
b1000 =!
b1100 >!
bz0000000000100000100000011 ?!
bx @!
b100 C!
b10110 E!
bx F
b10 F!
b1000001000000110110011 H
b1000 H!
b1 I
b10 J
b10110 L
b10 M
bx M!
b1 N
bx N!
b1 O!
b100 P!
b110011 R
b11 S
1T
b0 c
b1xxx0000000100 h
1t
b1000 |
b100 }

#50000
0!
0/

#55000
1!
bx !!
b10000 #
b10100 #!
b10000011100001010110011 $
b10100 $!
b10000 %!
b1100 &!
b1000 '!
b100 (!
b100 *
b1100 ,
bx .!
1/
bx /!
bx 0!
b10000011100001010110011 1
bx 1!
b10000 2
bx 4!
bx 6!
b100 7!
b10000 9!
1:
b1000011110001000110011 <!
b1100 =!
b10000 >!
b0 ?
bz0000000000100001111000100 ?!
bx A!
b1000 C!
b1 D!
b10 E!
b11 F!
bx G!
b1000011110001000110011 H
b1100 H!
b11 I
b1 K
b10 L
b11 M
b10 N
b1 O
b10 O!
b1 P
b1000 P!
b10 Q
b110011 R
bx R!
b11 S
1T
b1 T!
b100 U!
b11 Y
b11 j
b0 p
1w
b1 y
b10 z
b1100 |
b1000 }

#60000
0!
0/

#65000
1!
b10100 #
b11000 #!
b10000101000001100110011 $
b11000 $!
b10100 %!
b10000 &!
b1100 '!
b1000 (!
b101 *
b10000 ,
1/
b10000101000001100110011 1
b10100 2
b101 7!
b10100 9!
b10000011100001010110011 <!
b10000 =!
b10100 >!
bz0000000001000001110000101 ?!
b1100 C!
b11 D!
b100 F!
b11 G
b10000011100001010110011 H
b10000 H!
b100 J
b11 K
0L!
b100 M
b11 N
b10 O
b11 O!
b10 P
b1100 P!
b1 Q
b110011 R
b11 S
1T
b10 T!
b1000 U!
b110 Y
b110 g
b110 j
b11 r
b110 s
b10 y
b1 z
b10000 |
b1100 }

#70000
0!
0/

#75000
1!
b11000 #
b11100 #!
b10011000101000100001100011 $
b11100 $!
b11000 %!
b10100 &!
b10000 '!
b1100 (!
b110 *
b10100 ,
1/
b10011000101000100001100011 1
b11000 2
b110 7!
b11000 9!
b10000101000001100110011 <!
b10100 =!
b11000 >!
bz0000000001000010100000110 ?!
b10000 C!
b100 E!
b101 F!
b110 G
b10000101000001100110011 H
b10100 H!
b101 I
b100 L
b101 M
b100 N
b11 O
b100 O!
b1 P
b10000 P!
b10 Q
b110011 R
b11 S
1T
b11 T!
b1100 U!
b0 Y
b100 g
b0 j
b110 r
b100 s
b1 y
b10 z
b10100 |
b10000 }

#80000
0!
0/

#85000
1!
b11100 #
b100000 #!
b10000011010001000110011 $
b100000 $!
b11100 %!
b11000 &!
b10100 '!
b10000 (!
b111 *
b11000 ,
bz0zzzzzz01010 -!
1/
b10000011010001000110011 1
b11100 2
b10000 7!
b11100 9!
b10011000101000100001100011 <!
b11000 =!
b11100 >!
bz0000001001100010100010000 ?!
bz0zzzzzz01010 @!
b10100 C!
b101 D!
b10 F
b110 F!
b0 G
b10011000101000100001100011 H
b11000 H!
b110 J
b101 K
xL!
b110 M
b101 N
b100 O
b101 O!
b10 P
b10100 P!
b1 Q
b1100011 R
b11 S
1T
b100 T!
b1 U
b10000 U!
b1 Y
1Z
0a
b0 g
b100000001010 h
b1 j
b0 r
b0 s
b10 y
b1 z
b11000 |
b10100 }

#90000
0!
0/

#95000
1!
b100000 #
bx #!
b100000010001100011 $
b100100 $!
b100000 %!
b11100 &!
b11000 '!
b10100 (!
b1000 *
b11100 ,
bx -!
bz0zzzzzz01010 .!
1/
b100000010001100011 1
b100000 2
b100 7!
b100000 9!
b10000011010001000110011 <!
b11100 =!
x>
b100000 >!
bz0000000001000001101000100 ?!
bx @!
xB
xC
b11000 C!
b110 E!
bx F
b10000 F!
b1 G
bz0zzzzzz01010 G!
b10000011010001000110011 H
b11100 H!
b11 I
b100 J
b110 L
b10000 M
b110 N
b101 O
b110 O!
b1 P
b11000 P!
b10 Q
b110011 R
b11 S
1T
b101 T!
b10 U
b10100 U!
b101 Y
0Z
1[
1a
0b
b1xxx0000000100 h
b101 j
0k
1n
b1 r
b1 y
b10 z
b11100 |
b11000 }

#100000
0!
0/

#105000
1!
bx #
bx $
bx $!
b100100 %!
b100000 &!
b11100 '!
b11000 (!
b1001 *
b100000 ,
bz0zzzzzz01000 -!
bx .!
1/
bx 1
bx 2
b0 3!
b1000 7!
09
bx 9!
0<
b100000010001100011 <!
b100000 =!
0>
b100100 >!
bz0000000000000010000001000 ?!
bz0zzzzzz01000 @!
0B
0C
b11100 C!
b11 D!
b100 E!
b10 F
b100 F!
b101 G
bx G!
b100000010001100011 H
b100000 H!
b100 I
b0 J
b0x J!
b11 K
b100 L
b100 M
b10000 N
b110 O
b10000 O!
b0 P
b11100 P!
b0 Q
b1100011 R
b11 S
1T
b110 T!
b1 U
b11000 U!
b1 Y
1Z
0[
0a
1b
0e
b10 g
b100000001010 h
b1 j
1k
0n
b101 r
b10 s
0t
b0 y
b0 z
b100000 |
b11100 }
b0x ~

#110000
0!
0/

#115000
1!
bx %!
b0x &
b100100 &!
b100000 '!
b11100 (!
b1010 *
bx ,
b0 ,!
bx -!
bz0zzzzzz01000 .!
1/
b0x /!
b0x 0!
b0 1!
bx 3!
b0x 5
b0 5!
bx 7!
19
0:
x<
bx <!
x=
bx =!
x>
bx >!
bzxxxxxxxxxxxxxxxxxxxxxxxxx ?!
bx @!
xB
b0 B!
xC
b100000 C!
b100 D!
b0 E!
bx F
b1000 F!
b1 G
bz0zzzzzz01000 G!
bx H
b100100 H!
bx I
bx J
bx J!
b100 K
b0 L
0L!
b1000 M
b0x M!
b100 N
b10000 O
b100 O!
b10 P
b100000 P!
bx R
bx S
xT
b10000 T!
bx U
b11100 U!
bx V
bx Y
xZ
1[
x\
x^
x`
xa
0b
bx c
xe
b0 g
bx h
xi
bx j
0k
1n
b1 r
b0 s
1t
0w
b10 y
bx |
b100000 }
bx ~

#120000
0!
0/

#125000
1!
b0x !!
bx &
bx &!
b0 '
b100100 '!
b100000 (!
b1011 *
x+!
bx ,!
b1 -
bx .!
1/
bx /!
bx 0!
bx 1!
b0 4
bx 5
bx 5!
b0x 6!
x8
x8!
09
1:
x;!
bx ?
x@
xA
bx B!
bx C!
xD
bx D!
bx E!
bx F!
bx G
bx G!
bx H!
bx K
bx L
xL!
bx M
bx M!
b1000 N
b0 N!
b100 O
b1000 O!
b0 P
b100100 P!
xQ!
b0x R!
b100 T!
b100000 U!
bx W
x[
x]
x_
xb
bx g
xk
xl
xm
xn
xo
bx p
bx q
bx r
bx s
0t
1w
b0 y
x{
bx }

#130000
0!
0/

#135000
1!
bx !!
x%
bx '
bx '!
b100100 (!
b1100 *
b10 -
1/
bx 4
x6
bx 6!
x9
0:
bx N
bx N!
b1000 O
bx O!
bx P!
bx R!
b1000 T!
b100100 U!
bx X
xt
xu
bx v
0w

#140000
0!
0/

#145000
1!
bx (!
b1101 *
b11 -
1/
x:
bx E
bx O
bx T!
bx U!
xw
bx x

#150000
0!
0/

#155000
1!
b1110 *
b100 -
1/

#160000
0!
0/

#165000
1!
b1111 *
b101 -
1/

#170000
0!
0/

#175000
1!
b10000 *
b10 +
b110 -
1.
1/
b1 X!
