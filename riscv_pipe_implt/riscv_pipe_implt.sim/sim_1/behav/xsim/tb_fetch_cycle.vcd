$date
   Wed Jun 25 02:26:55 2025
$end

$version
  2023.2
  $dumpfile ("tb_fetch_cycle.vcd") 
$end

$timescale
  1ps
$end

$scope module tb_fetch_cycle $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var reg 1 # pcsrc_e $end
$var reg 32 $ pctarget_e [31:0] $end
$var reg 32 % instr_d [31:0] $end
$var reg 32 & pc_d [31:0] $end
$var reg 32 ' pcplus4_d [31:0] $end
$var reg 32 ( error_count [31:0] $end
$var reg 32 ) test_count [31:0] $end
$scope module dut $end
$var wire 1 * clk $end
$var wire 1 + rst $end
$var wire 1 , pcsrc_e $end
$var wire 32 - pctarget_e [31:0] $end
$var wire 32 . instr_d [31:0] $end
$var wire 32 / pc_d [31:0] $end
$var wire 32 0 pcplus4_d [31:0] $end
$var reg 32 1 pcf [31:0] $end
$var wire 32 2 pc_f [31:0] $end
$var wire 32 3 instr_f [31:0] $end
$var wire 32 4 pcplus4_f [31:0] $end
$var reg 32 5 instr_reg [31:0] $end
$var reg 32 6 pc_reg [31:0] $end
$var reg 32 7 pcplus4_reg [31:0] $end
$scope module pc_mux $end
$var wire 32 4 a [31:0] $end
$var wire 32 - b [31:0] $end
$var wire 1 , s $end
$var wire 32 2 c [31:0] $end
$upscope $end
$scope module program_counter $end
$var wire 1 * clk $end
$var wire 1 + rst $end
$var wire 32 8 pc_next [31:0] $end
$var reg 32 9 pc [31:0] $end
$upscope $end
$scope module imem $end
$var wire 1 + rst $end
$var wire 32 2 a [31:0] $end
$var wire 32 3 rd [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 : a [31:0] $end
$var wire 32 ; b [31:0] $end
$var wire 32 4 c [31:0] $end
$upscope $end
$upscope $end
$scope task apply_reset $end
$upscope $end
$scope task check_outputs $end
$var reg 32 < exp_instr [31:0] $end
$var reg 32 = exp_pc [31:0] $end
$var reg 32 > exp_pcplus4 [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
1"
0#
b0 $
b0 %
b0 &
b0 '
b0 (
b0 )
0*
1+
0,
b0 -
b0 .
b0 /
b0 0
bx 1
bx 2
b0 3
bx 4
bx 5
bx 6
bx 7
bx 8
bx 9
bx :
b100 ;
bx <
bx =
bx >
$end

#5000
1!
1*
b0 1
b0x00 2
b100 4
b0 5
b0 6
b0 7
b0 8
b0 9
b0 :

#10000
0!
0*

#15000
1!
0"
b100 '
1*
0+
b100 0
b100 1
b0x000 2
bx 3
b1000 4
b100 7
b100 8
b100 :

#20000
0!
0*

#25000
1!
bx %
b100 &
b1000 '
b1 )
1*
bx .
b100 /
b1000 0
b1000 1
b0x100 2
b1100 4
bx 5
b100 6
b1000 7
b1000 8
b100 9
b1000 :
b0 <
b0 =
b0 >

#26000
b1 (

#30000
0!
0*

#35000
1!
b1000 &
b1100 '
b10 )
1*
b1000 /
b1100 0
b1100 1
b0xx000 2
b10000 4
b1000 6
b1100 7
b1100 8
b1000 9
b1100 :
b100 >

#36000
b10 (

#40000
0!
0*

#45000
1!
b1100 &
b10000 '
b11 )
1*
b1100 /
b10000 0
b10000 1
b0xx100 2
b10100 4
b1100 6
b10000 7
b10000 8
b1100 9
b10000 :
b10001000100010001000100010001 <
b100 =
b1000 >

#46000
b11 (

#50000
0!
0*

#55000
1!
b10000 &
b10100 '
b100 )
1*
b10000 /
b10100 0
b10100 1
b1x000 2
b11000 4
b10000 6
b10100 7
b10100 8
b10000 9
b10100 :
b100010001000100010001000100010 <
b1000 =
b1100 >

#56000
1#
b1000000000000 $
b100 (
1,
b1000000000000 -
b0x0000000x0000 2

#60000
0!
0*

#65000
1!
b10100 &
b11000 '
b101 )
1*
b10100 /
b11000 0
b11000 1
b0x0000000x0x00 2
b11100 4
b10100 6
b11000 7
b11000 8
b10100 9
b11000 :
b110011001100110011001100110011 <
b1100 =
b10000 >

#66000
b101 (

#70000
0!
0*

#75000
1!
b11000 &
b11100 '
b110 )
1*
b11000 /
b11100 0
b11100 1
b0x0000000xx000 2
b100000 4
b11000 6
b11100 7
b11100 8
b11000 9
b11100 :
b0 <
b1000000000000 =
b1000000000100 >

#76000
b110 (

#80000
0!
0*

#85000
1!
1"
b0 %
b0 &
b0 '
1*
1+
b0 .
b0 /
b0 0
b0 1
b0x000000000000 2
b0 3
b100 4
b0 5
b0 6
b0 7
b0 8
b0 9
b0 :

#90000
0!
0*

#95000
1!
1*

#100000
0!
0*

#105000
1!
0"
b100 '
1*
0+
b100 0
b100 1
bx 3
b1000 4
b100 7
b100 8
b100 :

#110000
0!
0*

#115000
1!
bx %
b100 &
b1000 '
b111 )
1*
bx .
b100 /
b1000 0
b1000 1
b0x000000000x00 2
b1100 4
bx 5
b100 6
b1000 7
b1000 8
b100 9
b1000 :
b0 =
b0 >

#116000
0#
b111 (
0,
b0x100 2

#120000
0!
0*

#125000
1!
b1000 &
b1100 '
b1000 )
1*
b1000 /
b1100 0
b1100 1
b0xx000 2
b10000 4
b1000 6
b1100 7
b1100 8
b1000 9
b1100 :
b100 >

#126000
b1000 (
