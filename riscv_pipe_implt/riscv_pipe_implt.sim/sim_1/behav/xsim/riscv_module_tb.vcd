$date
   Tue Aug 12 11:40:45 2025
$end

$version
  2023.2
  $dumpfile ("riscv_module_tb.vcd") 
$end

$timescale
  1ps
$end

$scope module riscv_module_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 32 # instrf [31:0] $end
$var wire 32 $ pcf [31:0] $end
$var wire 1 % memwritem $end
$var wire 32 & aluresultm [31:0] $end
$var wire 32 ' writedatam [31:0] $end
$var reg 32 ( readdatam [31:0] $end
$var integer 32 ) i [31:0] $end
$scope module dut $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 32 $ pcf [31:0] $end
$var wire 32 , instrf [31:0] $end
$var wire 1 % memwritem $end
$var wire 32 & aluresultm [31:0] $end
$var wire 32 ' writedatam [31:0] $end
$var wire 32 - readdatam [31:0] $end
$var wire 1 . alusrcae $end
$var wire 1 / regwritem $end
$var wire 1 0 regwritew $end
$var wire 1 1 zeroe $end
$var wire 1 2 signe $end
$var wire 1 3 pcjalsrce $end
$var wire 1 4 pcsrce $end
$var wire 2 5 alusrcbe [1:0] $end
$var wire 1 6 stalld $end
$var wire 1 7 stallf $end
$var wire 1 8 flushd $end
$var wire 1 9 flushe $end
$var wire 1 : resultsrce0 $end
$var wire 2 ; resultsrcw [1:0] $end
$var wire 3 < immsrcd [2:0] $end
$var wire 4 = alucontrole [3:0] $end
$var wire 32 > instrd [31:0] $end
$var wire 5 ? rs1d [4:0] $end
$var wire 5 @ rs2d [4:0] $end
$var wire 5 A rs1e [4:0] $end
$var wire 5 B rs2e [4:0] $end
$var wire 5 C rde [4:0] $end
$var wire 5 D rdm [4:0] $end
$var wire 5 E rdw [4:0] $end
$var wire 2 F forwardae [1:0] $end
$var wire 2 G forwardbe [1:0] $end
$scope module controller_01 $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 7 H op [6:0] $end
$var wire 3 I funct3d [2:0] $end
$var wire 1 J funct7b5 $end
$var wire 1 1 zeroe $end
$var wire 1 2 signe $end
$var wire 1 9 flushe $end
$var wire 1 : resultsrce0 $end
$var wire 2 ; resultsrcw [1:0] $end
$var wire 1 % memwritem $end
$var wire 1 3 pcjalsrce $end
$var wire 1 4 pcsrce $end
$var wire 1 . alusrcae $end
$var wire 2 5 alusrcbe [1:0] $end
$var wire 1 / regwritem $end
$var wire 1 0 regwritew $end
$var wire 3 < immsrcd [2:0] $end
$var wire 4 = alucontrole [3:0] $end
$var wire 2 K aluopd [1:0] $end
$var wire 2 L resultsrcd [1:0] $end
$var wire 2 M resultsrce [1:0] $end
$var wire 2 N resultsrcm [1:0] $end
$var wire 4 O alucontrold [3:0] $end
$var wire 1 P branchd $end
$var wire 1 Q branche $end
$var wire 1 R memwrited $end
$var wire 1 S memwritee $end
$var wire 1 T jumpd $end
$var wire 1 U jumpe $end
$var wire 1 V alusrcad $end
$var wire 1 W regwrited $end
$var wire 1 X regwritee $end
$var wire 2 Y alusrcbd [1:0] $end
$var wire 1 Z zeroop $end
$var wire 1 [ signop $end
$var wire 1 \ branchop $end
$var wire 3 ] funct3e [2:0] $end
$scope module md $end
$var wire 7 H op [6:0] $end
$var wire 1 W regwrite $end
$var wire 2 L resultsrc [1:0] $end
$var wire 1 R memwrite $end
$var wire 1 P branch $end
$var wire 1 V alusrca $end
$var wire 2 Y alusrcb [1:0] $end
$var wire 1 T jump $end
$var wire 3 < immsrc [2:0] $end
$var wire 2 K aluop [1:0] $end
$var reg 14 ^ controls [13:0] $end
$upscope $end
$scope module ad $end
$var wire 1 J opb5 [0:0] $end
$var wire 3 I funct3 [2:0] $end
$var wire 1 J funct7b5 [0:0] $end
$var wire 2 K aluop [1:0] $end
$var wire 4 O alucontrol [3:0] $end
$var wire 1 _ rtypesub $end
$var reg 4 ` alucontrol_reg [3:0] $end
$upscope $end
$scope module pipreg_d_to_e $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 9 clear $end
$var wire 1 W regwrited $end
$var wire 1 R memwrited $end
$var wire 1 T jumpd $end
$var wire 1 P branchd $end
$var wire 1 V alusrcad $end
$var wire 2 Y alusrcbd [1:0] $end
$var wire 2 L resultsrcd [1:0] $end
$var wire 4 O alucontrold [3:0] $end
$var wire 3 I funct3d [2:0] $end
$var reg 1 a regwritee $end
$var reg 1 b memwritee $end
$var reg 1 c jumpe $end
$var reg 1 d branche $end
$var reg 1 e alusrcae $end
$var reg 2 f alusrcbe [1:0] $end
$var reg 2 g resultsrce [1:0] $end
$var reg 4 h alucontrole [3:0] $end
$var reg 3 i funct3e [2:0] $end
$upscope $end
$scope module pipreg_e_to_m $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 X regwritee $end
$var wire 1 S memwritee $end
$var wire 2 M resultsrce [1:0] $end
$var reg 1 j regwritem $end
$var reg 1 k memwritem $end
$var reg 2 l resultsrcm [1:0] $end
$upscope $end
$scope module pipreg_m_to_w $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 / regwritem $end
$var wire 2 N resultsrcm [1:0] $end
$var reg 1 m regwritew $end
$var reg 2 n resultsrcw [1:0] $end
$upscope $end
$upscope $end
$scope module hazardunit_01 $end
$var wire 5 ? rs1d [4:0] $end
$var wire 5 @ rs2d [4:0] $end
$var wire 5 A rs1e [4:0] $end
$var wire 5 B rs2e [4:0] $end
$var wire 5 C rde [4:0] $end
$var wire 5 D rdm [4:0] $end
$var wire 5 E rdw [4:0] $end
$var wire 1 / regwritem $end
$var wire 1 0 regwritew $end
$var wire 1 : resultsrce0 $end
$var wire 1 4 pcsrce $end
$var reg 2 o forwardae [1:0] $end
$var reg 2 p forwardbe [1:0] $end
$var wire 1 6 stalld $end
$var wire 1 7 stallf $end
$var wire 1 8 flushd $end
$var wire 1 9 flushe $end
$var wire 1 q lwstall $end
$upscope $end
$scope module datapath_01 $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 2 ; resultsrcw [1:0] $end
$var wire 1 3 pcjalsrce $end
$var wire 1 4 pcsrce $end
$var wire 1 . alusrcae $end
$var wire 2 5 alusrcbe [1:0] $end
$var wire 1 0 regwritew $end
$var wire 3 < immsrcd [2:0] $end
$var wire 4 = alucontrole [3:0] $end
$var wire 1 1 zeroe $end
$var wire 1 2 signe $end
$var wire 32 $ pcf [31:0] $end
$var wire 32 , instrf [31:0] $end
$var wire 32 > instrd [31:0] $end
$var wire 32 & aluresultm [31:0] $end
$var wire 32 ' writedatam [31:0] $end
$var wire 32 - readdatam [31:0] $end
$var wire 2 F forwardae [1:0] $end
$var wire 2 G forwardbe [1:0] $end
$var wire 5 ? rs1d [4:0] $end
$var wire 5 @ rs2d [4:0] $end
$var wire 5 A rs1e [4:0] $end
$var wire 5 B rs2e [4:0] $end
$var wire 5 C rde [4:0] $end
$var wire 5 D rdm [4:0] $end
$var wire 5 E rdw [4:0] $end
$var wire 1 6 stalld $end
$var wire 1 7 stallf $end
$var wire 1 8 flushd $end
$var wire 1 9 flushe $end
$var wire 32 r pcd [31:0] $end
$var wire 32 s pce [31:0] $end
$var wire 32 t aluresulte [31:0] $end
$var wire 32 u aluresultw [31:0] $end
$var wire 32 v readdataw [31:0] $end
$var wire 32 w pcnextf [31:0] $end
$var wire 32 x pcplus4f [31:0] $end
$var wire 32 y pcplus4d [31:0] $end
$var wire 32 z pcplus4e [31:0] $end
$var wire 32 { pcplus4m [31:0] $end
$var wire 32 | pcplus4w [31:0] $end
$var wire 32 } pctargete [31:0] $end
$var wire 32 ~ branjumptargete [31:0] $end
$var wire 1 !! pcjalsrcm $end
$var wire 32 "! writedatae [31:0] $end
$var wire 32 #! immextd [31:0] $end
$var wire 32 $! immexte [31:0] $end
$var wire 32 %! srcaefor [31:0] $end
$var wire 32 &! srcae [31:0] $end
$var wire 32 '! srcbe [31:0] $end
$var wire 32 (! rd1d [31:0] $end
$var wire 32 )! rd2d [31:0] $end
$var wire 32 *! rd1e [31:0] $end
$var wire 32 +! rd2e [31:0] $end
$var wire 32 ,! resultw [31:0] $end
$var wire 5 -! rdd [4:0] $end
$scope module u_jal_r $end
$var wire 32 } d0 [31:0] $end
$var wire 32 t d1 [31:0] $end
$var wire 1 !! s $end
$var wire 32 ~ y [31:0] $end
$upscope $end
$scope module u_pcmux $end
$var wire 32 x d0 [31:0] $end
$var wire 32 ~ d1 [31:0] $end
$var wire 1 4 s $end
$var wire 32 w y [31:0] $end
$upscope $end
$scope module u_if $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 .! en $end
$var wire 32 w d [31:0] $end
$var reg 32 /! q [31:0] $end
$upscope $end
$scope module u_pcadd4 $end
$var wire 32 $ a [31:0] $end
$var wire 32 0! b [31:0] $end
$var wire 32 x y [31:0] $end
$upscope $end
$scope module u_if_id $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 8 clear $end
$var wire 1 1! enable $end
$var wire 32 , instrf [31:0] $end
$var wire 32 $ pcf [31:0] $end
$var wire 32 x pcplus4f [31:0] $end
$var reg 32 2! instrd [31:0] $end
$var reg 32 3! pcd [31:0] $end
$var reg 32 4! pcplus4d [31:0] $end
$upscope $end
$scope module u_rf $end
$var wire 1 * clk $end
$var wire 1 0 we3 $end
$var wire 5 ? a1 [4:0] $end
$var wire 5 @ a2 [4:0] $end
$var wire 5 E a3 [4:0] $end
$var wire 32 ,! wd3 [31:0] $end
$var wire 32 (! rd1 [31:0] $end
$var wire 32 )! rd2 [31:0] $end
$upscope $end
$scope module u_ext $end
$var wire 32 5! instr [31:0] $end
$var wire 3 < immsrc [2:0] $end
$var reg 32 6! immext [31:0] $end
$upscope $end
$scope module u_id_iex $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 9 clear $end
$var wire 32 (! rd1d [31:0] $end
$var wire 32 )! rd2d [31:0] $end
$var wire 32 r pcd [31:0] $end
$var wire 5 ? rs1d [4:0] $end
$var wire 5 @ rs2d [4:0] $end
$var wire 5 -! rdd [4:0] $end
$var wire 32 #! immextd [31:0] $end
$var wire 32 y pcplus4d [31:0] $end
$var reg 32 7! rd1e [31:0] $end
$var reg 32 8! rd2e [31:0] $end
$var reg 32 9! pce [31:0] $end
$var reg 5 :! rs1e [4:0] $end
$var reg 5 ;! rs2e [4:0] $end
$var reg 5 <! rde [4:0] $end
$var reg 32 =! immexte [31:0] $end
$var reg 32 >! pcplus4e [31:0] $end
$upscope $end
$scope module u_forwardae $end
$var wire 32 *! d0 [31:0] $end
$var wire 32 ,! d1 [31:0] $end
$var wire 32 & d2 [31:0] $end
$var wire 2 F s [1:0] $end
$var wire 32 %! y [31:0] $end
$upscope $end
$scope module u_srcamux $end
$var wire 32 %! d0 [31:0] $end
$var wire 32 ?! d1 [31:0] $end
$var wire 1 . s $end
$var wire 32 &! y [31:0] $end
$upscope $end
$scope module u_forwardbe $end
$var wire 32 +! d0 [31:0] $end
$var wire 32 ,! d1 [31:0] $end
$var wire 32 & d2 [31:0] $end
$var wire 2 G s [1:0] $end
$var wire 32 "! y [31:0] $end
$upscope $end
$scope module u_srcbmux $end
$var wire 32 "! d0 [31:0] $end
$var wire 32 $! d1 [31:0] $end
$var wire 32 } d2 [31:0] $end
$var wire 2 5 s [1:0] $end
$var wire 32 '! y [31:0] $end
$upscope $end
$scope module u_pcaddbranch $end
$var wire 32 s a [31:0] $end
$var wire 32 $! b [31:0] $end
$var wire 32 } y [31:0] $end
$upscope $end
$scope module u_alu $end
$var wire 32 &! srca [31:0] $end
$var wire 32 '! srcb [31:0] $end
$var wire 4 = alucontrol [3:0] $end
$var reg 32 @! aluresult [31:0] $end
$var wire 1 1 zero $end
$var wire 1 2 sign $end
$var wire 32 A! sum [31:0] $end
$var wire 1 B! overflow $end
$upscope $end
$scope module u_iex_imem $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 3 pcjalsrce $end
$var wire 32 t aluresulte [31:0] $end
$var wire 32 "! writedatae [31:0] $end
$var wire 5 C rde [4:0] $end
$var wire 32 z pcplus4e [31:0] $end
$var reg 32 C! aluresulm [31:0] $end
$var reg 32 D! writedatm [31:0] $end
$var reg 5 E! rdm [4:0] $end
$var reg 32 F! pcplus4m [31:0] $end
$var reg 1 G! pcjalsrcm $end
$upscope $end
$scope module u_imem_iw $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 32 & aluresultm [31:0] $end
$var wire 32 - readdatam [31:0] $end
$var wire 5 D rdm [4:0] $end
$var wire 32 { pcplus4m [31:0] $end
$var reg 32 H! aluresultw [31:0] $end
$var reg 32 I! readdataw [31:0] $end
$var reg 5 J! rdw [4:0] $end
$var reg 32 K! pcplus4w [31:0] $end
$upscope $end
$scope module u_resultmux $end
$var wire 32 u d0 [31:0] $end
$var wire 32 v d1 [31:0] $end
$var wire 32 | d2 [31:0] $end
$var wire 2 ; s [1:0] $end
$var wire 32 ,! y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
0!!
1"
b0 "!
bx #
bz00000 #!
b0 $
b0 $!
0%
b0 %!
b0 &
b0 &!
b0 '
b0 '!
bx (
b0 (!
b100000 )
b0 )!
0*
b0 *!
1+
b0 +!
bx ,
b0 ,!
bx -
b0 -!
0.
1.!
0/
b0 /!
00
b100 0!
11
11!
02
b0 2!
03
b0 3!
04
b0 4!
b0 5
bz0000000000000000000000000 5!
06
bz00000 6!
07
b0 7!
08
b0 8!
09
b0 9!
0:
b0 :!
b0 ;
b0 ;!
b0 <
b0 <!
b0 =
b0 =!
b0 >
b0 >!
b0 ?
b0 ?!
b0 @
b0 @!
b0 A
b0 A!
b0 B
0B!
b0 C
b0 C!
b0 D
b0 D!
b0 E
b0 E!
b0 F
b0 F!
b0 G
0G!
b0 H
b0 H!
b0 I
b0 I!
0J
b0 J!
b0 K
b0 K!
b0 L
b0 M
b0 N
b0 O
0P
0Q
0R
0S
0T
0U
0V
0W
0X
b0 Y
1Z
0[
1\
b0 ]
b0 ^
0_
b0 `
0a
0b
0c
0d
0e
b0 f
b0 g
b0 h
b0 i
0j
0k
b0 l
0m
b0 n
b0 o
b0 p
0q
b0 r
b0 s
b0 t
b0 u
b0 v
b100 w
b100 x
b0 y
b0 z
b0 {
b0 |
b0 }
b0 ~
$end

#5000
1!
b10011 #
b0 (
1*
b10011 ,
b0 -

#10000
0!
0*

#15000
1!
1*

#20000
0!
0"
0*
0+

#25000
1!
b111100000000000010010011 #
b100 $
bz00000 $!
1*
b111100000000000010010011 ,
b100 /!
b10011 2!
b100 4!
bz00000 =!
b10011 >
b10011 H
b11 I
1J
b10 K
1W
b1 Y
b10000010000100 ^
b1000 w
b1000 x
b100 y
bx }
bx ~

#30000
0!
0*

#35000
1!
b100000000000100010011 #
b1000 $
bz00000 '!
bx )!
1*
b100000000000100010011 ,
b1 -!
b1000 /!
x1
x2
b111100000000000010010011 2!
b100 3!
b1000 4!
b1 5
bz0000000011110000000000001 5!
b111100000000000010010011 >
b100 >!
b1111 @
bx @!
bx A!
xB!
b10011 H
b11 I
1J
1X
xZ
x[
x\
1a
b1 f
b100 r
bx t
b1100 w
b1100 x
b1000 y
b100 z

#40000
0!
0*

#45000
1!
bx "!
b1000001000000110110011 #
b1100 $
bx &
1*
bx +!
b1000001000000110110011 ,
b10 -!
1/
b1100 /!
b100000000000100010011 2!
b1000 3!
b1100 4!
bz0000000000010000000000010 5!
bx 8!
b100 9!
b1111 ;!
b1 <!
b100000000000100010011 >
b1000 >!
b1 @
b1111 B
b1 C
bx C!
b100 F!
b10011 H
b11 I
1J
1j
b1000 r
b100 s
b10000 w
b10000 x
b1100 y
b1000 z
b100 {

#50000
0!
0*

#55000
1!
b1100010000001000110011 #
bx #!
b10000 $
bx '
bx (!
1*
b1100010000001000110011 ,
bx ,!
b11 -!
b10000 /!
10
b1000001000000110110011 2!
b1100 3!
b10000 4!
bz0000000000100000100000011 5!
bx 6!
b1000 9!
b1 ;!
bx <
b10 <!
b1000001000000110110011 >
b1100 >!
b1 ?
b10 @
b1 B
b10 C
b1 D
bx D!
b1 E!
b1000 F!
b10 G
b110011 H
bx H!
b11 I
1J
b100 K!
b0 Y
b1xxx0000000100 ^
1m
b10 p
b1100 r
b1000 s
bx u
b10100 w
b10100 x
b10000 y
b1100 z
b1000 {
b100 |

#60000
0!
0*

#65000
1!
b10011 #
b10100 $
bx $!
bx %!
bx &!
bx '!
1*
bx *!
b10011 ,
b100 -!
b10100 /!
b1100010000001000110011 2!
b10000 3!
b10100 4!
b0 5
bz0000000000110001000000100 5!
bx 7!
b1100 9!
b1 :!
b10 ;!
b11 <!
bx =!
b1100010000001000110011 >
b10000 >!
b10 ?
b11 @
b1 A
b10 B
b11 C
b10 D
b1 E
b10 E!
b1 F
b1100 F!
b110011 H
b11 I
1J
b1 J!
b1000 K!
b0 f
b1 o
b10 p
b10000 r
b1100 s
b11000 w
b11000 x
b10100 y
b10000 z
b1100 {
b1000 |

#70000
0!
0*

#75000
1!
bz00000 #!
b11000 $
b0 (!
b0 )!
1*
b0 -!
b11000 /!
b10011 2!
b10100 3!
b11000 4!
bz0000000000000000000000000 5!
bz00000 6!
b10000 9!
b10 :!
b11 ;!
b0 <
b100 <!
b10011 >
b10100 >!
b0 ?
b0 @
b10 A
b11 B
b100 C
b11 D
b10 E
b11 E!
b10000 F!
b10011 H
b11 I
1J
b10 J!
b1100 K!
b1 Y
b10000010000100 ^
b1 o
b10 p
b10100 r
b10000 s
b11100 w
b11100 x
b11000 y
b10100 z
b10000 {
b1100 |

#80000
0!
0*

#85000
1!
b0 "!
b11100 $
bz00000 $!
b0 %!
b0 &!
bz00000 '!
1*
b0 *!
b0 +!
b11100 /!
b11000 3!
b11100 4!
b1 5
b0 7!
b0 8!
b10100 9!
b0 :!
b0 ;!
b0 <!
bz00000 =!
b11000 >!
b0 A
b0 B
b0 C
b100 D
b11 E
b100 E!
b0 F
b10100 F!
b0 G
b11 J!
b10000 K!
b1 f
b0 o
b0 p
b11000 r
b10100 s
b100000 w
b100000 x
b11100 y
b11000 z
b10100 {
b10000 |

#90000
0!
0*

#95000
1!
b100000 $
b0 '
1*
b100000 /!
b11100 3!
b100000 4!
b11000 9!
b11100 >!
b0 D
b0 D!
b100 E
b0 E!
b11000 F!
b100 J!
b10100 K!
b11100 r
b11000 s
b100100 w
b100100 x
b100000 y
b11100 z
b11000 {
b10100 |

#100000
0!
0*

#105000
1!
b100100 $
1*
b100100 /!
b100000 3!
b100100 4!
b11100 9!
b100000 >!
b0 E
b11100 F!
b0 J!
b11000 K!
b100000 r
b11100 s
b101000 w
b101000 x
b100100 y
b100000 z
b11100 {
b11000 |

#110000
0!
0*

#115000
1!
b101000 $
1*
b101000 /!
b100100 3!
b101000 4!
b100000 9!
b100100 >!
b100000 F!
b11100 K!
b100100 r
b100000 s
b101100 w
b101100 x
b101000 y
b100100 z
b100000 {
b11100 |

#120000
0!
0*

#125000
1!
b101100 $
1*
b101100 /!
b101000 3!
b101100 4!
b100100 9!
b101000 >!
b100100 F!
b100000 K!
b101000 r
b100100 s
b110000 w
b110000 x
b101100 y
b101000 z
b100100 {
b100000 |

#130000
0!
0*

#135000
1!
b110000 $
1*
b110000 /!
b101100 3!
b110000 4!
b101000 9!
b101100 >!
b101000 F!
b100100 K!
b101100 r
b101000 s
b110100 w
b110100 x
b110000 y
b101100 z
b101000 {
b100100 |

#140000
0!
0*

#145000
1!
b110100 $
1*
b110100 /!
b110000 3!
b110100 4!
b101100 9!
b110000 >!
b101100 F!
b101000 K!
b110000 r
b101100 s
b111000 w
b111000 x
b110100 y
b110000 z
b101100 {
b101000 |

#150000
0!
0*

#155000
1!
b111000 $
1*
b111000 /!
b110100 3!
b111000 4!
b110000 9!
b110100 >!
b110000 F!
b101100 K!
b110100 r
b110000 s
b111100 w
b111100 x
b111000 y
b110100 z
b110000 {
b101100 |

#160000
0!
0*

#165000
1!
b111100 $
1*
b111100 /!
b111000 3!
b111100 4!
b110100 9!
b111000 >!
b110100 F!
b110000 K!
b111000 r
b110100 s
b1000000 w
b1000000 x
b111100 y
b111000 z
b110100 {
b110000 |

#170000
0!
0*

#175000
1!
b1000000 $
1*
b1000000 /!
b111100 3!
b1000000 4!
b111000 9!
b111100 >!
b111000 F!
b110100 K!
b111100 r
b111000 s
b1000100 w
b1000100 x
b1000000 y
b111100 z
b111000 {
b110100 |

#180000
0!
0*

#185000
1!
b1000100 $
1*
b1000100 /!
b1000000 3!
b1000100 4!
b111100 9!
b1000000 >!
b111100 F!
b111000 K!
b1000000 r
b111100 s
b1001000 w
b1001000 x
b1000100 y
b1000000 z
b111100 {
b111000 |

#190000
0!
0*

#195000
1!
b1001000 $
1*
b1001000 /!
b1000100 3!
b1001000 4!
b1000000 9!
b1000100 >!
b1000000 F!
b111100 K!
b1000100 r
b1000000 s
b1001100 w
b1001100 x
b1001000 y
b1000100 z
b1000000 {
b111100 |

#200000
0!
0*

#205000
1!
b1001100 $
1*
b1001100 /!
b1001000 3!
b1001100 4!
b1000100 9!
b1001000 >!
b1000100 F!
b1000000 K!
b1001000 r
b1000100 s
b1010000 w
b1010000 x
b1001100 y
b1001000 z
b1000100 {
b1000000 |

#210000
0!
0*

#215000
1!
b1010000 $
1*
b1010000 /!
b1001100 3!
b1010000 4!
b1001000 9!
b1001100 >!
b1001000 F!
b1000100 K!
b1001100 r
b1001000 s
b1010100 w
b1010100 x
b1010000 y
b1001100 z
b1001000 {
b1000100 |

#220000
0!
0*

#225000
1!
b1010100 $
1*
b1010100 /!
b1010000 3!
b1010100 4!
b1001100 9!
b1010000 >!
b1001100 F!
b1001000 K!
b1010000 r
b1001100 s
b1011000 w
b1011000 x
b1010100 y
b1010000 z
b1001100 {
b1001000 |

#230000
0!
0*

#235000
1!
b1011000 $
1*
b1011000 /!
b1010100 3!
b1011000 4!
b1010000 9!
b1010100 >!
b1010000 F!
b1001100 K!
b1010100 r
b1010000 s
b1011100 w
b1011100 x
b1011000 y
b1010100 z
b1010000 {
b1001100 |

#240000
0!
0*

#245000
1!
b1011100 $
1*
b1011100 /!
b1011000 3!
b1011100 4!
b1010100 9!
b1011000 >!
b1010100 F!
b1010000 K!
b1011000 r
b1010100 s
b1100000 w
b1100000 x
b1011100 y
b1011000 z
b1010100 {
b1010000 |

#250000
0!
0*

#255000
1!
b1100000 $
1*
b1100000 /!
b1011100 3!
b1100000 4!
b1011000 9!
b1011100 >!
b1011000 F!
b1010100 K!
b1011100 r
b1011000 s
b1100100 w
b1100100 x
b1100000 y
b1011100 z
b1011000 {
b1010100 |

#260000
0!
0*

#265000
1!
b1100100 $
1*
b1100100 /!
b1100000 3!
b1100100 4!
b1011100 9!
b1100000 >!
b1011100 F!
b1011000 K!
b1100000 r
b1011100 s
b1101000 w
b1101000 x
b1100100 y
b1100000 z
b1011100 {
b1011000 |

#270000
0!
0*

#275000
1!
b1101000 $
1*
b1101000 /!
b1100100 3!
b1101000 4!
b1100000 9!
b1100100 >!
b1100000 F!
b1011100 K!
b1100100 r
b1100000 s
b1101100 w
b1101100 x
b1101000 y
b1100100 z
b1100000 {
b1011100 |

#280000
0!
0*

#285000
1!
b1101100 $
1*
b1101100 /!
b1101000 3!
b1101100 4!
b1100100 9!
b1101000 >!
b1100100 F!
b1100000 K!
b1101000 r
b1100100 s
b1110000 w
b1110000 x
b1101100 y
b1101000 z
b1100100 {
b1100000 |

#290000
0!
0*

#295000
1!
b1110000 $
1*
b1110000 /!
b1101100 3!
b1110000 4!
b1101000 9!
b1101100 >!
b1101000 F!
b1100100 K!
b1101100 r
b1101000 s
b1110100 w
b1110100 x
b1110000 y
b1101100 z
b1101000 {
b1100100 |

#300000
0!
0*

#305000
1!
b1110100 $
1*
b1110100 /!
b1110000 3!
b1110100 4!
b1101100 9!
b1110000 >!
b1101100 F!
b1101000 K!
b1110000 r
b1101100 s
b1111000 w
b1111000 x
b1110100 y
b1110000 z
b1101100 {
b1101000 |

#310000
0!
0*

#315000
1!
b1111000 $
1*
b1111000 /!
b1110100 3!
b1111000 4!
b1110000 9!
b1110100 >!
b1110000 F!
b1101100 K!
b1110100 r
b1110000 s
b1111100 w
b1111100 x
b1111000 y
b1110100 z
b1110000 {
b1101100 |

#320000
0!
0*

#325000
1!
b1111100 $
1*
b1111100 /!
b1111000 3!
b1111100 4!
b1110100 9!
b1111000 >!
b1110100 F!
b1110000 K!
b1111000 r
b1110100 s
b10000000 w
b10000000 x
b1111100 y
b1111000 z
b1110100 {
b1110000 |

#330000
0!
0*

#335000
1!
b10000000 $
1*
b10000000 /!
b1111100 3!
b10000000 4!
b1111000 9!
b1111100 >!
b1111000 F!
b1110100 K!
b1111100 r
b1111000 s
b10000100 w
b10000100 x
b10000000 y
b1111100 z
b1111000 {
b1110100 |

#340000
0!
0*

#345000
1!
b10000100 $
1*
b10000100 /!
b10000000 3!
b10000100 4!
b1111100 9!
b10000000 >!
b1111100 F!
b1111000 K!
b10000000 r
b1111100 s
b10001000 w
b10001000 x
b10000100 y
b10000000 z
b1111100 {
b1111000 |

#350000
0!
0*

#355000
1!
b10001000 $
1*
b10001000 /!
b10000100 3!
b10001000 4!
b10000000 9!
b10000100 >!
b10000000 F!
b1111100 K!
b10000100 r
b10000000 s
b10001100 w
b10001100 x
b10001000 y
b10000100 z
b10000000 {
b1111100 |

#360000
0!
0*

#365000
1!
b10001100 $
1*
b10001100 /!
b10001000 3!
b10001100 4!
b10000100 9!
b10001000 >!
b10000100 F!
b10000000 K!
b10001000 r
b10000100 s
b10010000 w
b10010000 x
b10001100 y
b10001000 z
b10000100 {
b10000000 |

#370000
0!
0*

#375000
1!
b10010000 $
1*
b10010000 /!
b10001100 3!
b10010000 4!
b10001000 9!
b10001100 >!
b10001000 F!
b10000100 K!
b10001100 r
b10001000 s
b10010100 w
b10010100 x
b10010000 y
b10001100 z
b10001000 {
b10000100 |

#380000
0!
0*

#385000
1!
b10010100 $
1*
b10010100 /!
b10010000 3!
b10010100 4!
b10001100 9!
b10010000 >!
b10001100 F!
b10001000 K!
b10010000 r
b10001100 s
b10011000 w
b10011000 x
b10010100 y
b10010000 z
b10001100 {
b10001000 |

#390000
0!
0*

#395000
1!
b10011000 $
1*
b10011000 /!
b10010100 3!
b10011000 4!
b10010000 9!
b10010100 >!
b10010000 F!
b10001100 K!
b10010100 r
b10010000 s
b10011100 w
b10011100 x
b10011000 y
b10010100 z
b10010000 {
b10001100 |

#400000
0!
0*

#405000
1!
b10011100 $
1*
b10011100 /!
b10011000 3!
b10011100 4!
b10010100 9!
b10011000 >!
b10010100 F!
b10010000 K!
b10011000 r
b10010100 s
b10100000 w
b10100000 x
b10011100 y
b10011000 z
b10010100 {
b10010000 |

#410000
0!
0*

#415000
1!
b10100000 $
1*
b10100000 /!
b10011100 3!
b10100000 4!
b10011000 9!
b10011100 >!
b10011000 F!
b10010100 K!
b10011100 r
b10011000 s
b10100100 w
b10100100 x
b10100000 y
b10011100 z
b10011000 {
b10010100 |

#420000
0!
0*

#425000
1!
b10100100 $
1*
b10100100 /!
b10100000 3!
b10100100 4!
b10011100 9!
b10100000 >!
b10011100 F!
b10011000 K!
b10100000 r
b10011100 s
b10101000 w
b10101000 x
b10100100 y
b10100000 z
b10011100 {
b10011000 |

#430000
0!
0*

#435000
1!
b10101000 $
1*
b10101000 /!
b10100100 3!
b10101000 4!
b10100000 9!
b10100100 >!
b10100000 F!
b10011100 K!
b10100100 r
b10100000 s
b10101100 w
b10101100 x
b10101000 y
b10100100 z
b10100000 {
b10011100 |

#440000
0!
0*

#445000
1!
b10101100 $
1*
b10101100 /!
b10101000 3!
b10101100 4!
b10100100 9!
b10101000 >!
b10100100 F!
b10100000 K!
b10101000 r
b10100100 s
b10110000 w
b10110000 x
b10101100 y
b10101000 z
b10100100 {
b10100000 |

#450000
0!
0*

#455000
1!
b10110000 $
1*
b10110000 /!
b10101100 3!
b10110000 4!
b10101000 9!
b10101100 >!
b10101000 F!
b10100100 K!
b10101100 r
b10101000 s
b10110100 w
b10110100 x
b10110000 y
b10101100 z
b10101000 {
b10100100 |

#460000
0!
0*

#465000
1!
b10110100 $
1*
b10110100 /!
b10110000 3!
b10110100 4!
b10101100 9!
b10110000 >!
b10101100 F!
b10101000 K!
b10110000 r
b10101100 s
b10111000 w
b10111000 x
b10110100 y
b10110000 z
b10101100 {
b10101000 |

#470000
0!
0*

#475000
1!
b10111000 $
1*
b10111000 /!
b10110100 3!
b10111000 4!
b10110000 9!
b10110100 >!
b10110000 F!
b10101100 K!
b10110100 r
b10110000 s
b10111100 w
b10111100 x
b10111000 y
b10110100 z
b10110000 {
b10101100 |

#480000
0!
0*

#485000
1!
b10111100 $
1*
b10111100 /!
b10111000 3!
b10111100 4!
b10110100 9!
b10111000 >!
b10110100 F!
b10110000 K!
b10111000 r
b10110100 s
b11000000 w
b11000000 x
b10111100 y
b10111000 z
b10110100 {
b10110000 |

#490000
0!
0*

#495000
1!
b11000000 $
1*
b11000000 /!
b10111100 3!
b11000000 4!
b10111000 9!
b10111100 >!
b10111000 F!
b10110100 K!
b10111100 r
b10111000 s
b11000100 w
b11000100 x
b11000000 y
b10111100 z
b10111000 {
b10110100 |
